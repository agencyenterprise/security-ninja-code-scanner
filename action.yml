name: security ninja code scanner
description: this action performs a security scan on your code repository and detects any potential security vulnerabilities or secrets that may be present.

inputs:
  check_packages_vulnerabilities:
    description: should it check vulnerabilities in your project's dependency tree?
    required: false
    default: false
    type: boolean

runs:
  using: composite
  steps:
    - name: checkout code
      uses: actions/checkout@v2
      
    - name: install bearer
      shell: bash
      run: |
        curl -sfL https://raw.githubusercontent.com/Bearer/bearer/main/contrib/install.sh | sh -d -s -- -b /usr/local/bin

    - name: setup node.js
      uses: actions/setup-node@v2
      with:
        node-version: 14.x

    - name: run bearer for secrets
      shell: bash
      run: bearer scan ${{ github.workspace }} --scanner=secrets,sast --force --output report-scan.json --format json

    - name: run npm audit
      shell: bash
      run: |
        if (${{ inputs.check_packages_vulnerabilities }}) ; then
          npm audit -audit-level=critical -json > audit.json
        else 
          echo "no need for checking packages vulnerabilities"
        fi

    - name: create comment for reported errors
      uses: actions/github-script@v6

      with:
        script: |
          const fileUrl = (path, lineNumber) => {
            const fileNamePath = path.split(context.payload.repository.name).pop()
            const repoUrl = context.payload.pull_request.head.repo.html_url
            const branch = context.payload.pull_request.head.ref
            return `[${fileNamePath}:${lineNumber}](${repoUrl}/tree/${branch}${fileNamePath}#L${lineNumber})`
          }

          let report = require('./report-scan.json')
          let severity = Object.keys(report)
          let body = []
          severity.forEach(severity => {
            body.push(`## security issues: ${severity}`)
            report[severity].forEach(error => {
              body.push(`- [ ] **${error.title.toLowerCase()}**`)
              if (error.description) {
                body.push(`${error.description.toLowerCase()}`)
              }
              if (error.cwe_ids) {
                error.cwe_ids.forEach(cwe_id => {
                  body.push(
                    `[cwe ${cwe_id}](https://cwe.mitre.org/data/definitions/${cwe_id}.html)`,
                  )
                })
              }

              body.push(`${fileUrl(error.filename, error.line_number)}`)
              if (error.parent_content) {
                body.push('```\n' + error.parent_content + '\n```')
              }
              if (error.snippet) {
                body.push('```\n' + error.snippet + '\n```')
              }
              if (error.documentation_url) {
                body.push(`[Documentation](${error.documentation_url})`)
              }
              body.push(`\n------`)
            })
          })
          if (body.length) {
            body.push(`🚨 ☝️ @${context.actor}`)

            await github.rest.issues.createComment({
              issue_number: context.payload.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `# 🥷 🔒 security check\n${body.join('\n')}`,
            })
          } else {
            await github.rest.issues.createComment({
              issue_number: context.payload.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `:+1: @${context.actor} no secret issues detected! ✅`,
            })
          }

          if (${{ inputs.check_packages_vulnerabilities }}) {
            const audit = require('./audit.json')

            const vulnerabilities = audit.vulnerabilities
            body = []
            const packages = Object.keys(vulnerabilities)
            if (packages.length) {
              packages.forEach(package => {
                const vulnerability = vulnerabilities[package]
                body.push(`- [ ] **${package.toLowerCase()}**`)
                body.push(`severity: ${vulnerability.severity}`)
                body.push(`range: \`${vulnerability.range}\``)
                body.push(`${vulnerability.fixAvailable ? '✅ it is fixable' : 'not fixable yet'}`)
                const via = vulnerability.via
                if (via.length > 0) {
                  body.push(`via:`)
                  via.forEach(item => {
                    if (typeof item === 'string') {
                      body.push(`- ${item}`)
                    } else {
                      if (item.title) {
                        body.push(`- *${item.title}* - ${item.dependency ? `dependency: ${item.dependency}` : ''}`)
                      }
                      if (item.url) {
                        body.push(`   ${item.url}`)
                      }
                    }
                    if (item.cwe) {
                      const cwe = []
                      item.cwe.forEach(cweItem => {
                        cwe.push(`[${cweItem}](https://cwe.mitre.org/data/definitions/${cweItem}.html)`)
                      })
                      body.push(`   ${cwe.join(', ')}`)
                    }
                  })
                  body.push(`\n------`)
                }
              })

              if (body.length) {
                body.push(`🚨 ☝️ @${context.actor}`)
                await github.rest.issues.createComment({
                  issue_number: context.payload.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: `# 🥷 🛡️ npm audit issues\n${body.join('\n')}`,
                })
              } else {
                await github.rest.issues.createComment({
                  issue_number: context.payload.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: `:+1: @${context.actor} no npm audit issues detected! ✅`,
                })
              }
            }
          }
